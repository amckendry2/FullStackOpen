{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useQuery } from '@apollo/client';\nimport { GET_REPOSITORIES } from \"../graphql/queries\";\n\nvar useRepositories = function useRepositories(variables) {\n  var _useQuery = useQuery(GET_REPOSITORIES, {\n    fetchPolicy: 'cache-and-network',\n    variables: variables\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore,\n      loading = _useQuery.loading;\n\n  var handleFetchMore = function handleFetchMore() {\n    console.log('loading', loading);\n    console.log(data);\n    var canFetchMore = !loading && (data == null ? void 0 : data.repositories.pageInfo.hasNextPage);\n\n    if (!canFetchMore) {\n      return;\n    }\n\n    console.log(data);\n    fetchMore({\n      variables: _objectSpread({\n        after: data.repositories.pageInfo.endCursor\n      }, variables)\n    });\n  };\n\n  return {\n    repositories: data,\n    loading: loading,\n    error: error,\n    fetchMore: handleFetchMore\n  };\n};\n\nexport default useRepositories;","map":{"version":3,"sources":["/home/fuzzy-dunlop/Desktop/react-projects/rate-repository-app/src/hooks/useRepositories.js"],"names":["useQuery","GET_REPOSITORIES","useRepositories","variables","fetchPolicy","data","error","fetchMore","loading","handleFetchMore","console","log","canFetchMore","repositories","pageInfo","hasNextPage","after","endCursor"],"mappings":";;;;;;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,SAAS,EAAI;AACpC,kBAA4CH,QAAQ,CAACC,gBAAD,EAAmB;AACtEG,IAAAA,WAAW,EAAE,mBADyD;AAEtED,IAAAA,SAAS,EAATA;AAFsE,GAAnB,CAApD;AAAA,MAAQE,IAAR,aAAQA,IAAR;AAAA,MAAcC,KAAd,aAAcA,KAAd;AAAA,MAAqBC,SAArB,aAAqBA,SAArB;AAAA,MAAgCC,OAAhC,aAAgCA,OAAhC;;AAKA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,QAAMO,YAAY,GAAG,CAACJ,OAAD,KAAYH,IAAZ,oBAAYA,IAAI,CAAEQ,YAAN,CAAmBC,QAAnB,CAA4BC,WAAxC,CAArB;;AACA,QAAI,CAACH,YAAL,EAAmB;AAClB;AACA;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAE,IAAAA,SAAS,CAAC;AACTJ,MAAAA,SAAS;AACRa,QAAAA,KAAK,EAAEX,IAAI,CAACQ,YAAL,CAAkBC,QAAlB,CAA2BG;AAD1B,SAELd,SAFK;AADA,KAAD,CAAT;AAMA,GAdD;;AAgBA,SAAO;AACNU,IAAAA,YAAY,EAAER,IADR;AAENG,IAAAA,OAAO,EAAPA,OAFM;AAGNF,IAAAA,KAAK,EAALA,KAHM;AAINC,IAAAA,SAAS,EAAEE;AAJL,GAAP;AAMA,CA5BD;;AA8BA,eAAeP,eAAf","sourcesContent":["// import { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_REPOSITORIES } from '../graphql/queries'\n\nconst useRepositories = variables => {\n\tconst { data, error, fetchMore, loading } = useQuery(GET_REPOSITORIES, {\n\t\tfetchPolicy: 'cache-and-network',\n\t\tvariables\n\t})\n\n\tconst handleFetchMore = () => {\n\t\tconsole.log('loading', loading)\n\t\tconsole.log(data)\n\t\tconst canFetchMore = !loading && data?.repositories.pageInfo.hasNextPage\n\t\tif (!canFetchMore) {\n\t\t\treturn\n\t\t}\n\t\tconsole.log(data)\n\t\tfetchMore({\n\t\t\tvariables: {\n\t\t\t\tafter: data.repositories.pageInfo.endCursor,\n\t\t\t\t...variables\n\t\t\t}\n\t\t})\n\t}\n\n\treturn { \n\t\trepositories: data, \n\t\tloading, \n\t\terror, \n\t\tfetchMore: handleFetchMore \n\t}\n}\n\nexport default useRepositories"]},"metadata":{},"sourceType":"module"}