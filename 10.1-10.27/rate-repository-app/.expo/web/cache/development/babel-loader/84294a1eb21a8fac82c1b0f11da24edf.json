{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport Constants from 'expo-constants';\nimport { setContext } from '@apollo/client/link/context';\nimport { relayStylePagination } from '@apollo/client/utilities';\nvar httpLink = createHttpLink({\n  uri: Constants.manifest.extra.apolloUri\n});\nvar cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        repositories: relayStylePagination()\n      }\n    }\n  }\n});\n\nvar createApolloClient = function createApolloClient(authStorage) {\n  var authLink = setContext(function _callee(_, _ref) {\n    var headers, accessToken;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _ref.headers;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(authStorage.getAccessToken());\n\n          case 4:\n            accessToken = _context.sent;\n            return _context.abrupt(\"return\", {\n              headers: _objectSpread(_objectSpread({}, headers), {}, {\n                authorization: accessToken ? \"Bearer \" + accessToken : ''\n              })\n            });\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {\n              headers: headers\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  });\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: cache\n  });\n};\n\nexport default createApolloClient;","map":{"version":3,"sources":["/home/fuzzy-dunlop/Desktop/react-projects/rate-repository-app/src/utils/apolloClient.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","Constants","setContext","relayStylePagination","httpLink","uri","manifest","extra","apolloUri","cache","typePolicies","Query","fields","repositories","createApolloClient","authStorage","authLink","_","headers","getAccessToken","accessToken","authorization","console","log","link","concat"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AAEA,IAAMC,QAAQ,GAAGJ,cAAc,CAAC;AAC/BK,EAAAA,GAAG,EAAEJ,SAAS,CAACK,QAAV,CAAmBC,KAAnB,CAAyBC;AADC,CAAD,CAA/B;AAIA,IAAMC,KAAK,GAAG,IAAIV,aAAJ,CAAkB;AAC/BW,EAAAA,YAAY,EAAE;AACbC,IAAAA,KAAK,EAAE;AACNC,MAAAA,MAAM,EAAE;AACPC,QAAAA,YAAY,EAAEV,oBAAoB;AAD3B;AADF;AADM;AADiB,CAAlB,CAAd;;AAUA,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,WAAW,EAAI;AAEzC,MAAMC,QAAQ,GAAGd,UAAU,CAAC,iBAAOe,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,YAAAA,OAAZ,QAAYA,OAAZ;AAAA;AAAA;AAAA,6CAEAH,WAAW,CAACI,cAAZ,EAFA;;AAAA;AAEpBC,YAAAA,WAFoB;AAAA,6CAGnB;AACNF,cAAAA,OAAO,kCACHA,OADG;AAENG,gBAAAA,aAAa,EAAED,WAAW,eAAaA,WAAb,GAA6B;AAFjD;AADD,aAHmB;;AAAA;AAAA;AAAA;AAU1BE,YAAAA,OAAO,CAACC,GAAR;AAV0B,6CAWnB;AACNL,cAAAA,OAAO,EAAPA;AADM,aAXmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,CAA3B;AAiBA,SAAO,IAAIpB,YAAJ,CAAiB;AACvB0B,IAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBrB,QAAhB,CADiB;AAEvBK,IAAAA,KAAK,EAALA;AAFuB,GAAjB,CAAP;AAIA,CAvBD;;AAyBA,eAAeK,kBAAf","sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client'\nimport Constants from 'expo-constants'\nimport { setContext } from '@apollo/client/link/context'\nimport { relayStylePagination } from '@apollo/client/utilities'\n\nconst httpLink = createHttpLink({\n\turi: Constants.manifest.extra.apolloUri\n})\n\nconst cache = new InMemoryCache({\n\ttypePolicies: {\n\t\tQuery: {\n\t\t\tfields: {\n\t\t\t\trepositories: relayStylePagination()\n\t\t\t}\n\t\t}\n\t}\n})\n\nconst createApolloClient = authStorage => {\n\n\tconst authLink = setContext(async (_, { headers }) => {\n\t\ttry{\n\t\t\tconst accessToken = await authStorage.getAccessToken();\n\t\t\treturn {\n\t\t\t\theaders: {\n\t\t\t\t\t...headers,\n\t\t\t\t\tauthorization: accessToken ? `Bearer ${accessToken}` : ''\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tconsole.log(err)\n\t\t\treturn {\n\t\t\t\theaders\n\t\t\t}\n\t\t}\n\t})\n\n\treturn new ApolloClient({\n\t\tlink: authLink.concat(httpLink),\n\t\tcache\n\t})\n}\n\nexport default createApolloClient"]},"metadata":{},"sourceType":"module"}