{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"name\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useField } from 'formik';\nimport ThemedTextInput from \"./ThemedTextInput\";\nimport ThemedText from \"./ThemedText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  errorMsg: {\n    marginTop: 5,\n    color: 'red'\n  }\n});\n\nvar FormikTextInput = function FormikTextInput(_ref) {\n  var name = _ref.name,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useField = useField(name),\n      _useField2 = _slicedToArray(_useField, 3),\n      field = _useField2[0],\n      meta = _useField2[1],\n      helpers = _useField2[2];\n\n  var showError = meta.touched && meta.error;\n  return _jsxs(_Fragment, {\n    children: [_jsx(ThemedTextInput, _objectSpread({\n      onChangeText: function onChangeText(value) {\n        return helpers.setValue(value);\n      },\n      onBlur: function onBlur() {\n        return helpers.setTouched(true);\n      },\n      value: field.value,\n      error: showError\n    }, props)), showError && _jsx(ThemedText, {\n      style: styles.errorMsg,\n      children: meta.error\n    })]\n  });\n};\n\nexport default FormikTextInput;","map":{"version":3,"sources":["/home/fuzzy-dunlop/Desktop/react-projects/rate-repository-app/src/components/FormikTextInput.jsx"],"names":["useField","ThemedTextInput","ThemedText","styles","StyleSheet","create","errorMsg","marginTop","color","FormikTextInput","name","props","field","meta","helpers","showError","touched","error","value","setValue","setTouched"],"mappings":";;;;;;;;;;AACA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,eAAP;AACA,OAAOC,UAAP;;;;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAChCC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,SAAS,EAAE,CADF;AAETC,IAAAA,KAAK,EAAE;AAFE;AADsB,CAAlB,CAAf;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAZC,KAAY;;AAC/C,kBAA+BX,QAAQ,CAACU,IAAD,CAAvC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAcC,IAAd;AAAA,MAAoBC,OAApB;;AACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAAvC;AAEA,SACC;AAAA,eACC,KAAC,eAAD;AACC,MAAA,YAAY,EAAE,sBAAAC,KAAK;AAAA,eAAIJ,OAAO,CAACK,QAAR,CAAiBD,KAAjB,CAAJ;AAAA,OADpB;AAEC,MAAA,MAAM,EAAE;AAAA,eAAMJ,OAAO,CAACM,UAAR,CAAmB,IAAnB,CAAN;AAAA,OAFT;AAGC,MAAA,KAAK,EAAER,KAAK,CAACM,KAHd;AAIC,MAAA,KAAK,EAAEH;AAJR,OAKKJ,KALL,EADD,EAQEI,SAAS,IACT,KAAC,UAAD;AAAY,MAAA,KAAK,EAAEZ,MAAM,CAACG,QAA1B;AAAA,gBACEO,IAAI,CAACI;AADP,MATF;AAAA,IADD;AAeA,CAnBD;;AAqBA,eAAeR,eAAf","sourcesContent":["import { StyleSheet } from 'react-native'\nimport { useField } from 'formik'\nimport ThemedTextInput from './ThemedTextInput'\nimport ThemedText from './ThemedText'\n\nconst styles = StyleSheet.create({\n\terrorMsg: {\n\t\tmarginTop: 5,\n\t\tcolor: 'red'\n\t}\n})\n\nconst FormikTextInput = ({ name, ...props }) => {\n\tconst [field, meta, helpers] = useField(name)\n\tconst showError = meta.touched && meta.error\n\n\treturn (\n\t\t<>\n\t\t\t<ThemedTextInput\n\t\t\t\tonChangeText={value => helpers.setValue(value)}\n\t\t\t\tonBlur={() => helpers.setTouched(true)}\n\t\t\t\tvalue={field.value}\n\t\t\t\terror={showError}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t{showError &&\n\t\t\t\t<ThemedText style={styles.errorMsg}>\n\t\t\t\t\t{meta.error}\n\t\t\t\t</ThemedText>}\n\t\t</>\n\t)\n}\n\nexport default FormikTextInput"]},"metadata":{},"sourceType":"module"}