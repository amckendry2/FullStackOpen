{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nimport { gql } from '@apollo/client';\nvar REPO_DETAILS = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  fragment RepoDetails on Repository {\\n    id\\n    ownerAvatarUrl\\n    description\\n    language\\n    stargazersCount\\n    reviewCount\\n    ratingAverage\\n    fullName\\n    forksCount\\n    url\\n  }\\n\"])));\nvar REVIEW_DETAILS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  fragment ReviewDetails on Repository {\\n    reviews {\\n      edges {\\n        node {\\n          id\\n          text\\n          rating\\n          createdAt\\n          user {\\n           id\\n           username \\n          }\\n        }\\n      }\\n    }\\n  }\\n\"])));\nexport var GET_REPOSITORIES = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n\\tquery repositories(\\n    $orderBy: AllRepositoriesOrderBy, \\n    $orderDirection: OrderDirection\\n  ) {\\n    repositories(orderBy: $orderBy, orderDirection: $orderDirection) {\\n      edges {\\n        node {\\n          ...RepoDetails\\n        }\\n      }\\n    }\\n\\t}\\n  \", \"\\n\"])), REPO_DETAILS);\nexport var GET_SINGLE_REPOSITORY = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n  query repository($repositoryId: ID!) {\\n    repository(id: $repositoryId) {\\n      ...RepoDetails\\n      ...ReviewDetails\\n    }\\n  } \\n  \", \"\\n  \", \"\\n\"])), REPO_DETAILS, REVIEW_DETAILS);\nexport var GET_ME = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"\\n  query Query {\\n    me {\\n      username\\n    }\\n  }\\n\"])));","map":{"version":3,"sources":["/home/fuzzy-dunlop/Desktop/react-projects/rate-repository-app/src/graphql/queries.js"],"names":["gql","REPO_DETAILS","REVIEW_DETAILS","GET_REPOSITORIES","GET_SINGLE_REPOSITORY","GET_ME"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,IAAMC,YAAY,GAAGD,GAAH,oRAAlB;AAeA,IAAME,cAAc,GAAGF,GAAH,+UAApB;AAmBA,OAAO,IAAMG,gBAAgB,GAAGH,GAAH,mWAazBC,YAbyB,CAAtB;AAgBP,OAAO,IAAMG,qBAAqB,GAAGJ,GAAH,yOAO9BC,YAP8B,EAQ9BC,cAR8B,CAA3B;AAWP,OAAO,IAAMG,MAAM,GAAGL,GAAH,qIAAZ","sourcesContent":["import { gql } from '@apollo/client'\n\nconst REPO_DETAILS = gql`\n  fragment RepoDetails on Repository {\n    id\n    ownerAvatarUrl\n    description\n    language\n    stargazersCount\n    reviewCount\n    ratingAverage\n    fullName\n    forksCount\n    url\n  }\n`\n\nconst REVIEW_DETAILS = gql`\n  fragment ReviewDetails on Repository {\n    reviews {\n      edges {\n        node {\n          id\n          text\n          rating\n          createdAt\n          user {\n           id\n           username \n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_REPOSITORIES = gql`\n\tquery repositories(\n    $orderBy: AllRepositoriesOrderBy, \n    $orderDirection: OrderDirection\n  ) {\n    repositories(orderBy: $orderBy, orderDirection: $orderDirection) {\n      edges {\n        node {\n          ...RepoDetails\n        }\n      }\n    }\n\t}\n  ${REPO_DETAILS}\n`\n\nexport const GET_SINGLE_REPOSITORY = gql`\n  query repository($repositoryId: ID!) {\n    repository(id: $repositoryId) {\n      ...RepoDetails\n      ...ReviewDetails\n    }\n  } \n  ${REPO_DETAILS}\n  ${REVIEW_DETAILS}\n`\n\nexport const GET_ME = gql`\n  query Query {\n    me {\n      username\n    }\n  }\n`"]},"metadata":{},"sourceType":"module"}