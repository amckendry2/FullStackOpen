{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport CreateReviewForm from \"./CreateReviewForm\";\nimport { useMutation } from '@apollo/client';\nimport { CREATE_REVIEW } from \"../../graphql/mutations\";\nimport { useNavigate } from 'react-router-native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar CreateReview = function CreateReview() {\n  var _useMutation = useMutation(CREATE_REVIEW),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createReview = _useMutation2[0];\n\n  var navigate = useNavigate();\n\n  var handleSubmitReview = function handleSubmitReview(_ref) {\n    var repositoryName, repositoryOwner, rating, review, _await$createReview, repository;\n\n    return _regeneratorRuntime.async(function handleSubmitReview$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            repositoryName = _ref.repositoryName, repositoryOwner = _ref.repositoryOwner, rating = _ref.rating, review = _ref.review;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(createReview({\n              variables: {\n                review: {\n                  repositoryName: repositoryName,\n                  ownerName: repositoryOwner,\n                  rating: parseInt(rating),\n                  text: review\n                }\n              }\n            }));\n\n          case 4:\n            _await$createReview = _context.sent;\n            repository = _await$createReview.repository;\n            navigate(\"/repos/\" + repository.id);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  return _jsx(CreateReviewForm, {\n    onSubmit: handleSubmitReview\n  });\n};\n\nexport default CreateReview;","map":{"version":3,"sources":["/home/fuzzy-dunlop/Desktop/react-projects/rate-repository-app/src/components/CreateReview/index.jsx"],"names":["CreateReviewForm","useMutation","CREATE_REVIEW","useNavigate","CreateReview","createReview","navigate","handleSubmitReview","repositoryName","repositoryOwner","rating","review","variables","ownerName","parseInt","text","repository","id","console","log"],"mappings":";;AAAA,OAAOA,gBAAP;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,aAAT;AACA,SAASC,WAAT,QAA4B,qBAA5B;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAE1B,qBAAyBH,WAAW,CAACC,aAAD,CAApC;AAAA;AAAA,MAAQG,YAAR;;AACA,MAAMC,QAAQ,GAAGH,WAAW,EAA5B;;AAEA,MAAMI,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,cAAT,QAASA,cAAT,EAAyBC,eAAzB,QAAyBA,eAAzB,EAA0CC,MAA1C,QAA0CA,MAA1C,EAAkDC,MAAlD,QAAkDA,MAAlD;AAAA;AAAA;AAAA,6CAEIN,YAAY,CAAC;AACzCO,cAAAA,SAAS,EAAE;AACVD,gBAAAA,MAAM,EAAE;AACPH,kBAAAA,cAAc,EAAEA,cADT;AAEPK,kBAAAA,SAAS,EAAEJ,eAFJ;AAGPC,kBAAAA,MAAM,EAAEI,QAAQ,CAACJ,MAAD,CAHT;AAIPK,kBAAAA,IAAI,EAAEJ;AAJC;AADE;AAD8B,aAAD,CAFhB;;AAAA;AAAA;AAEjBK,YAAAA,UAFiB,uBAEjBA,UAFiB;AAYzBV,YAAAA,QAAQ,aAAWU,UAAU,CAACC,EAAtB,CAAR;AAZyB;AAAA;;AAAA;AAAA;AAAA;AAczBC,YAAAA,OAAO,CAACC,GAAR;;AAdyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAiBA,SAAO,KAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAEZ;AAA5B,IAAP;AACA,CAvBD;;AAyBA,eAAeH,YAAf","sourcesContent":["import CreateReviewForm from './CreateReviewForm'\nimport { useMutation } from '@apollo/client'\nimport { CREATE_REVIEW } from '../../graphql/mutations'\nimport { useNavigate } from 'react-router-native'\n\nconst CreateReview = () => {\n\n\tconst [ createReview ] = useMutation(CREATE_REVIEW)\n\tconst navigate = useNavigate()\n\n\tconst handleSubmitReview = async ({ repositoryName, repositoryOwner, rating, review }) => {\n\t\ttry {\n\t\t\tconst { repository } = await createReview({\n\t\t\t\tvariables: {\n\t\t\t\t\treview: {\n\t\t\t\t\t\trepositoryName: repositoryName,\n\t\t\t\t\t\townerName: repositoryOwner,\n\t\t\t\t\t\trating: parseInt(rating),\n\t\t\t\t\t\ttext: review\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tnavigate(`/repos/${repository.id}`)\n\t\t} catch(err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n\treturn <CreateReviewForm onSubmit={handleSubmitReview}/>\n}\n\nexport default CreateReview"]},"metadata":{},"sourceType":"module"}