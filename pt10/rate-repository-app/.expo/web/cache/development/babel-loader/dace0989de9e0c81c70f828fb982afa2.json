{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useQuery } from '@apollo/client';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { GET_ME } from \"../../graphql/queries\";\nimport ReviewItem from \"../RepositoryList/ReviewItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar MyReviews = function MyReviews() {\n  var _useQuery = useQuery(GET_ME, {\n    variables: {\n      includeReviews: true\n    }\n  }),\n      myReviews = _useQuery.data;\n\n  if (!myReviews) {\n    return null;\n  }\n\n  var reviewsData = myReviews.me.reviews.edges.map(function (e) {\n    return e.node;\n  });\n  return _jsx(FlatList, {\n    data: reviewsData,\n    renderItem: function renderItem(props) {\n      return _jsx(ReviewItem, _objectSpread({}, props));\n    }\n  });\n};\n\nexport default MyReviews;","map":{"version":3,"sources":["/home/fuzzy-dunlop/Desktop/react-projects/rate-repository-app/src/components/MyReviews/index.js"],"names":["useQuery","GET_ME","ReviewItem","MyReviews","variables","includeReviews","myReviews","data","reviewsData","me","reviews","edges","map","e","node","props"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;;AAEA,SAASC,MAAT;AACA,OAAOC,UAAP;;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAEvB,kBAA4BH,QAAQ,CAACC,MAAD,EAAS;AAC5CG,IAAAA,SAAS,EAAE;AACVC,MAAAA,cAAc,EAAE;AADN;AADiC,GAAT,CAApC;AAAA,MAAcC,SAAd,aAAQC,IAAR;;AAMA,MAAG,CAACD,SAAJ,EAAc;AACb,WAAO,IAAP;AACA;;AAED,MAAME,WAAW,GAAGF,SAAS,CAACG,EAAV,CAAaC,OAAb,CAAqBC,KAArB,CAA2BC,GAA3B,CAA+B,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAN;AAAA,GAAhC,CAApB;AAEA,SACC,KAAC,QAAD;AACC,IAAA,IAAI,EAAEN,WADP;AAEC,IAAA,UAAU,EAAE,oBAAAO,KAAK;AAAA,aAAI,KAAC,UAAD,oBAAgBA,KAAhB,EAAJ;AAAA;AAFlB,IADD;AAMA,CApBD;;AAsBA,eAAeZ,SAAf","sourcesContent":["import { useQuery } from '@apollo/client'\nimport { FlatList } from 'react-native'\nimport { GET_ME } from '../../graphql/queries'\nimport ReviewItem from '../RepositoryList/ReviewItem'\n\nconst MyReviews = () => {\n\n\tconst { data: myReviews } = useQuery(GET_ME, {\n\t\tvariables: {\n\t\t\tincludeReviews: true\n\t\t}\n\t})\n\n\tif(!myReviews){\n\t\treturn null\n\t}\n\n\tconst reviewsData = myReviews.me.reviews.edges.map(e => e.node)\n\n\treturn (\n\t\t<FlatList\n\t\t\tdata={reviewsData}\t\n\t\t\trenderItem={props => <ReviewItem {...props}/>}\n\t\t/>\n\t)\n}\n\nexport default MyReviews"]},"metadata":{},"sourceType":"module"}